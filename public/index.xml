<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts &amp; experiments</title>
    <link>/</link>
    <description>Recent content on Thoughts &amp; experiments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Drawing mathematical flowers with R</title>
      <link>/drawing-mathematical-flowers-with-r/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/drawing-mathematical-flowers-with-r/</guid>
      <description>Exploring visualisation with ggplot while playing with numbers In this post we’ll create a ‘flowery’ pattern using geom_point function. Let’s see how we build toward it step by step. (PS- I did this exercise as a part of a project in datacamp)
Let’s begin by creating a basic circle in R t &amp;lt;- seq(0, 2*pi, length.out = 50) x &amp;lt;- sin(t) y &amp;lt;- cos(t) df &amp;lt;- data.frame(t, x, y) # Make a scatter plot of points in a circle p &amp;lt;- ggplot(df, aes(x, y)) p + geom_point()  Let us now increase the points, add the magic of golden ratio, and create a spiralling effect # Defining the number of points points &amp;lt;- 500 # Defining the Golden Angle angle &amp;lt;- pi*(3-sqrt(5)) t &amp;lt;- (1:points) * angle x &amp;lt;- sin(t) y &amp;lt;-cos(t) df &amp;lt;- data.</description>
    </item>
    
    <item>
      <title>Exploring search trends with gtrendsR</title>
      <link>/exploring-google-trends-with-gtrendsr/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/exploring-google-trends-with-gtrendsr/</guid>
      <description>Using gtrendsR package Let’s explore some basic trends on usage of popular tech products in India. We’ll do a quick exploration of search trends on web. We will try to be careful that there is some logic to higher usage leading to more web searches. Still, don’t take it as a rigorous way to analyse, but only as a fun way to explore the functionality of an R package.</description>
    </item>
    
    <item>
      <title>Exploring forbes 2018 list with forbesList package</title>
      <link>/exploring-forbes-2018-list-with-forbeslist-package/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/exploring-forbes-2018-list-with-forbeslist-package/</guid>
      <description>Using forbesListR package We’ll access forbes list through forbesListR package. For more details see https://github.com/abresler/forbesListR.
After loading the packages, calling the Forbes billionaires list, and formatting the data
forbes_data &amp;lt;- get_year_forbes_list_data(list = &amp;quot;Billionaires&amp;quot;, year = 2018) forbes_data_clean &amp;lt;- forbes_data %&amp;gt;% mutate(`Net worth (Bn USD)` = round(net_worth.millions/1000,2), Image = paste0(&amp;#39;![](&amp;#39;, url.image, &amp;#39;)&amp;#39;)) %&amp;gt;% rename(Industry = industry, Country = country, Age = age, Name = name) %&amp;gt;% select(Name, Image, Age, `Net worth (Bn USD)`, Country, Industry) forbes_data_clean$Age_group &amp;lt;- sapply(forbes_data_clean$Age, age_group) Let’s start by printing top 10 entries in the list forbes_data_clean %&amp;gt;% select(-Age_group) %&amp;gt;% head(10) %&amp;gt;% kable(caption = &amp;quot;Top 10 in Forbes 2018&amp;quot;) %&amp;gt;% kableExtra::kable_styling(bootstrap_options = &amp;quot;responsive&amp;quot;)  Table 1: Top 10 in Forbes 2018    Name  Image  Age  Net worth (Bn USD)  Country  Industry      Jeff Bezos   55  112.</description>
    </item>
    
  </channel>
</rss>